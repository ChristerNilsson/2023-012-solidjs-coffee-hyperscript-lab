// Generated by CoffeeScript 2.5.1
// Inspiration: https://blog.openreplay.com/solid-vs-react-the-fastest-vs-the-most-popular-ui-library/
// Lathund för översättning från Solid JSX till min variant:
// <div a=3 b=4>pelle</div> => div {a:3, b:4},"Pelle"
// 'r4r => App' ersätter 'render(() => <App />, document.getElementById("app"));'
//   (Lägg in id=app i body i index.html)
// saknas en html-kod, skriv in den i utils.js, enligt 'export button = (a...) => h "button", a"'
// ersätt createSignal med signal
// Testkör logiken genom att lägga in anrop till r4r => App i events. 
//   (Rensa med document.body.innerHTML = "" innan varje anrop till r4r => App)
// Använd coffeescripts loopar och if-satser. <For> behövs ej.
// Använd "do" då loopar och events förekommer samtidigt. Annars används loop-variablens sista värde.
// Rensa bort onödiga skräptecken som semikolon, parenteser, måsvingar, </>, och ()
// Till exempel kan man ta bort de sista nio raderna i originalkoden.
// return kan oftast strykas.
// Typer kan tas bort.
var App, setTodos, todos;

import {
  log,
  r4r,
  signal
} from "/js/utils.js";

import {
  input,
  button,
  div,
  b,
  p
} from "/js/utils.js";

// All data måste ligga före App!
[todos, setTodos] = signal([
  {
    id: "1",
    text: "Adam",
    done: false
  },
  {
    id: "2",
    text: "Bertil",
    done: true
  },
  {
    id: "3",
    text: "Cesar",
    done: false
  },
  {
    id: "4",
    text: "David",
    done: true
  }
]);

App = () => {
  var addClick, addTodo, createTodo, doneTodos, inp, onkeydown, removeTodo, setTodoDone, todo, undoneTodos;
  doneTodos = () => {
    return todos().filter((todo) => {
      return todo.done;
    });
  };
  undoneTodos = () => {
    return todos().filter((todo) => {
      return !todo.done;
    });
  };
  createTodo = (text) => {
    return setTodos(() => {
      return [
        ...todos(),
        {
          id: `${Math.random()}`,
          text,
          done: false
        }
      ];
    });
  };
  removeTodo = (id) => {
    return setTodos(todos().filter((todo) => {
      return todo.id !== id;
    }));
  };
  setTodoDone = (id, done) => {
    return setTodos(todos().map((todo) => {
      if (todo.id === id) {
        return {...todo, done};
      } else {
        return todo;
      }
    }));
  };
  addTodo = (s) => {
    if (s) {
      return createTodo(s);
    }
  };
  onkeydown = (event) => {
    if (event.key === "Enter") {
      return addTodo(event.target.value);
    }
  };
  addClick = (event) => {
    return addTodo(inp.value);
  };
  return div({}, inp = input({
    value: "",
    onkeydown
  }), button({
    onClick: addClick
  }, "Add"), p({}, b({}, "Todo"), (function() {
    var i, len, ref, results;
    ref = undoneTodos();
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      todo = ref[i];
      results.push(((todo) => {
        return div({}, button({
          onClick: () => {
            return setTodoDone(todo.id, true);
          }
        }, "Done"), " " + todo.text);
      })(todo));
    }
    return results;
  }).call(this)), p({}, b({}, "Done"), (function() {
    var i, len, ref, results;
    ref = doneTodos();
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      todo = ref[i];
      results.push(((todo) => {
        return div({}, button({
          onClick: () => {
            return removeTodo(todo.id);
          }
        }, "Remove"), button({
          onClick: () => {
            return setTodoDone(todo.id, false);
          }
        }, "Undo"), " " + todo.text);
      })(todo));
    }
    return results;
  }).call(this)));
};

r4r(() => {
  return App;
});

// Originalkod (85 rader):

// import { For, render } from "solid-js/web";
// import { createMemo, createSignal } from "solid-js";

// interface TODO {
//     id: string;
//     text: string;
//     done: boolean;
// }

// const App = () => {
//     const [todos, setTodos] = createSignal<TODO[]>([]);
//     const [input, setInput] = createSignal("");
//     const doneTodos = createMemo(() => todos().filter((todo) => todo.done));
//     const undoneTodos = createMemo(() => todos().filter((todo) => !todo.done));
//     const createTodo = (text: string) => {
//     setTodos([...todos(), { id: `${Math.random()}`, text, done: false }]);
//     };
//     const removeTodo = (todoId: string) => {
//     setTodos(todos().filter((todo) => todo.id !== todoId));
//     };
//     const setTodoDone = (todoId: string, done: boolean) => {
//     setTodos(
//         todos().map((todo) => {
//         if (todo.id === todoId) {
//             return { ...todo, done };
//         }
//         return todo;
//         })
//     );
//     };
//     const addTodo = () => {
//     const currentInput = input();
//     if (currentInput) {
//         createTodo(currentInput);
//         setInput("");
//     }
//     };
//     const onInput = (event: InputEvent) => {
//     const target = event.target as HTMLInputElement;

//     setInput(target.value);
//     };
//     const onKeydown = (event: KeyboardEvent) => {
//     if (event.key === "Enter") {
//         addTodo();
//     }
//     };

//     return (
//     <div>
//         <input value={input()} onInput={onInput} onKeyDown={onKeydown} />
//         <button onClick={addTodo}>Add</button>
//         <div>
//         <b>Todo:</b>
//         <For each={undoneTodos()}>
//             {(todo) => {
//             return (
//                 <div>
//                 {todo.text}
//                 <button onClick={() => setTodoDone(todo.id, true)}>Done</button>
//                 </div>
//             );
//             }}
//         </For>
//         </div>
//         <div>
//         <b>Done:</b>
//         <For each={doneTodos()}>
//             {(todo) => {
//             return (
//                 <div>
//                 {todo.text}
//                 <button onClick={() => removeTodo(todo.id)}>Remove</button>
//                 <button onClick={() => setTodoDone(todo.id, false)}>
//                     Undo
//                 </button>
//                 </div>
//             );
//             }}
//         </For>
//         </div>
//     </div>
//     );
// };

// render(() => <App />, document.getElementById("app"));

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-012-solidjs-coffee-hyperscript-lab\coffee\sketch4.coffee