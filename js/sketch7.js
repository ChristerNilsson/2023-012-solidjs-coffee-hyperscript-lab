// Generated by CoffeeScript 2.5.1
var KNIGHT, QUEEN, S, click, illegals, knight, knightHops, makeIllegals, makeKnight, makeKnightHops, makeQueens, makeTargets, queen, queens, setIllegals, setKnight, setKnightHops, setQueen, setQueens, setState, setTargets, showPieces, showRects, state, targets,
  indexOf = [].indexOf;

import _ from 'https://cdn.skypack.dev/lodash';

import {
  abs,
  N,
  col,
  row,
  log,
  svg,
  Position,
  range,
  rect,
  text,
  signal,
  effect,
  r4r,
  div,
  g
} from '/js/utils.js';

QUEEN = '♛';

KNIGHT = '♘';

S = 40; // square size

[state, setState] = signal(-1);

[queens, setQueens] = signal([]);

[queen, setQueen] = signal(-1);

[knight, setKnight] = signal(-1);

[illegals, setIllegals] = signal([]);

[targets, setTargets] = signal([]);

[knightHops, setKnightHops] = signal([]);

makeQueens = () => { // anger de rutor som damen kan placeras på
  var c, cx, cy, dx, dy, j, k, len, len1, r, ref, ref1, ref2, res;
  cx = 7; // board center x
  cy = 7; // board center y
  res = [];
  ref = range(N);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    ref1 = range(N);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      c = ref1[k];
      dx = abs(2 * c - cx);
      dy = abs(2 * r - cy);
      if ((ref2 = dx * dy) !== 3 && ref2 !== 7 && ref2 !== 9 && ref2 !== 15) {
        res.push(c + 8 * r);
      }
    }
  }
  res.sort(function(a, b) {
    return a - b;
  });
  return res;
};

makeIllegals = (queen) => {
  if (queen === -1) {
    return [];
  }
  return _.filter(range(N * N), (i) => {
    var ci, cq, dc, dr, ri, rq;
    ci = col(i);
    ri = row(i);
    cq = col(queen);
    rq = row(queen);
    dc = abs(ci - cq);
    dr = abs(ri - rq);
    return ci === cq || ri === rq || dc === dr;
  });
};

makeTargets = (illegals) => {
  if (illegals === []) {
    return [];
  }
  return range(N * N).filter((i) => {
    return !illegals.includes(i);
  });
};

makeKnight = (targets) => {
  if (targets.length === 64) {
    return -1;
  }
  return targets[0];
};

makeKnightHops = (knight) => {
  var c, c2, dc, dr, index, j, k, len, len1, r, r2, ref, ref1, res;
  if (knight === -1) {
    return [];
  }
  res = [];
  c = col(knight);
  r = row(knight);
  ref = [-2, -1, 1, 2];
  for (j = 0, len = ref.length; j < len; j++) {
    dc = ref[j];
    ref1 = [-2, -1, 1, 2];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      dr = ref1[k];
      if (abs(dc) === abs(dr)) {
        continue;
      }
      c2 = c + dc;
      r2 = r + dr;
      index = c2 + 8 * r2;
      if (indexOf.call(range(8), c2) >= 0 && indexOf.call(range(8), r2) >= 0 && indexOf.call(targets(), index) >= 0) {
        res.push(index);
      }
    }
  }
  res.sort(function(a, b) {
    return a - b;
  });
  return res;
};

click = function(index) {
  if (state() === 0) {
    if (indexOf.call(queens(), index) >= 0) {
      setQueen(index);
      log('queen', index);
      setIllegals(makeIllegals(queen()));
      log('illegals', illegals());
      setTargets(makeTargets(illegals()));
      log('targets', targets());
      setKnight(() => {
        return makeKnight(targets());
      });
      log('knight', knight());
      setKnightHops(makeKnightHops(knight()));
      log('knightHops', knightHops());
      setState(1);
    } else {
      log('not a valid queen position');
    }
    return;
  }
  if (state() === 1) {
    if (indexOf.call(knightHops(), index) >= 0) {
      setKnight(index);
      setKnightHops(makeKnightHops(knight()));
      return log('knightHops', index, '=>', knightHops());
    } else {
      return log('not a valid knight position');
    }
  }
};

// arr = _.clone toggle() # OBS utan clone så uppfattas det inte som någon uppdatering
// _.set arr,index, not arr[index] # _.set föreslogs av CoPilot!
// setToggle arr
showRects = () => {
  var i, j, len, ref, results;
  ref = range(N * N);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(((i) => {
      var c, fill, height, r, width, x, y;
      r = 7 - row(i);
      c = col(i);
      x = S + S * c;
      y = S + S * r;
      width = S;
      height = S;
      fill = ['brown', 'black'][(r + c) % 2];
      return rect({
        x,
        y,
        width,
        height,
        fill,
        onClick: () => {
          return click(i);
        }
      });
    })(i));
  }
  return results;
};

showPieces = (pieces, PIECE) => {
  var c, j, len, piece, r, results, x, y;
  results = [];
  for (j = 0, len = pieces.length; j < len; j++) {
    piece = pieces[j];
    if (piece !== -1) {
      r = 7 - row(piece);
      c = col(piece);
      x = S * (1.5 + c);
      y = S * (1.85 + r);
      results.push(text({
        x,
        y,
        "text-anchor": "middle",
        "font-size": S,
        fill: "white",
        onClick: () => {
          return click(piece);
        }
      }, PIECE));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

setState(0);

setQueens(makeQueens());

log('queens', queens());

r4r(() => { // Har ej förstått varför TVÅ loopar behövs.
  return svg({
    viewBox: "0 0 400 400",
    width: 320,
    height: 320
  }, showRects(), () => {
    if (state() === 0) {
      return showPieces(queens(), QUEEN);
    }
  }, () => {
    if (state() === 1) {
      return showPieces([queen()], QUEEN);
    }
  }, () => {
    if (state() === 1) {
      return showPieces([knight()], KNIGHT);
    }
  });
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-012-solidjs-coffee-hyperscript-lab\coffee\sketch7.coffee